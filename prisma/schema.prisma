// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// >>>>>>>>>>>>>>>>>>>>> COMANDOS PARA PRISMA
// npx prisma generate => Para generar el cliente de prisma
// npx prisma migrate dev => Para crear la migraci√≥n en la base de datos

// Para resetear migraciones y la base de datos desde cero
// 1. Eliminar la carpeta migrations
// 2. npx prisma migrate dev
// Observacion: Los seeds se ejecutan antes de que las tablas hayan sido creadas, por lo que se debe ejecutar el comando npx prisma db push
// 3. npx prisma db push
// 4.npx prisma migrate reset
// 5.npx prisma db seed

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  role_id   Int      @id @default(autoincrement())
  name      RoleType @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("roles")
}

model User {
  user_id       Int            @id @default(autoincrement())
  first_name    String
  last_name     String
  email         String         @unique
  password      String
  phone         String?
  address       String?
  balance       Decimal        @default(0.00) @db.Decimal(10, 6)
  role_id       Int
  role          Role           @relation(fields: [role_id], references: [role_id])
  subscriptions Subscription[]
  payments      Payment[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("users")
}

model Plan {
  plan_id       Int            @id @default(autoincrement())
  name          String
  description   String?
  price         Decimal        @default(0.00) @db.Decimal(10, 6)
  billing_cycle BillingCycle   @default(monthly)
  subscriptions Subscription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("plans")
}

model Subscription {
  subscription_id Int                @id @default(autoincrement())
  user_id         Int
  plan_id         Int
  start_date      DateTime
  end_date        DateTime
  status          SubscriptionStatus @default(pending)
  auto_renew      Boolean            @default(true)
  user            User               @relation(fields: [user_id], references: [user_id])
  plan            Plan               @relation(fields: [plan_id], references: [plan_id])
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@map("subscriptions")
}

model Service {
  service_id  Int      @id @default(autoincrement())
  name        String
  description String?
  price       Decimal  @default(0.00) @db.Decimal(10, 6)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("services")
}

model PaymentMethod {
  payment_method_id Int         @id @default(autoincrement())
  name              PaymentType @unique
  payments          Payment[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@map("payment_methods")
}

model Payment {
  payment_id        Int             @id @default(autoincrement())
  user_id           Int
  total_amount      Decimal         @default(0.00) @db.Decimal(10, 6)
  payment_date      DateTime        @default(now())
  status            PaymentStatus   @default(pending)
  transaction_id    String?         @unique
  payment_method_id Int
  gateway_response  String?
  user              User            @relation(fields: [user_id], references: [user_id])
  paymentMethod     PaymentMethod   @relation(fields: [payment_method_id], references: [payment_method_id])
  paymentDetails    PaymentDetail[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@map("payments")
}

model PaymentDetail {
  payment_detail_id Int             @id @default(autoincrement())
  payment_id        Int
  type              PaymentItemType
  item_id           Int
  amount            Decimal         @default(0.00) @db.Decimal(10, 6)
  payment           Payment         @relation(fields: [payment_id], references: [payment_id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@map("payment_details")
}

enum RoleType {
  admin
  client
}

enum BillingCycle {
  monthly
  yearly
}

enum SubscriptionStatus {
  active
  inactive
  pending
  cancelled
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

enum PaymentType {
  credit_card
  paypal
  bank_transfer
  crypto
  cash
}

enum PaymentItemType {
  plan
  service
}
